@page "/resource/list"

@using BlazorApp1.Data
@inject ResourceService ResourceService
@inject NavigationManager navigation
@inject IJSRuntime JsRuntime

<h3>Lista Recursos Asociados</h3>
<button class="btn btn-primary" @onclick="()=>Editar(0)">Nuevo</button>
@if (resources == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id Recurso</th>
                <th>Nombre Recursos</th>
                <th>Usuario Nombre</th>
                <th>Usuario Apellido</th>
                <th>Editar</th>
                <th>Borrar</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var resource in resources)
            {
            <tr>
                <td>@resource.Id</td>
                <td>@resource.Name</td>
                <td>@resource.User.Name</td>
                <td>@resource.User.LastName</td>
                <td><button class="btn btn-primary" @onclick="()=>Editar(resource.Id)">Editar</button></td>
                <td><button class="btn btn-danger" @onclick="()=>Borrar(resource.Id)">Borrar</button></td>
            </tr>
            }
        </tbody>
    </table>
}




@code {
    private List<Resource> resources;

    protected override async Task OnInitializedAsync()
    {
        resources = await ResourceService.GetResources();
    }

    protected void Editar(int id)
    {
        navigation.NavigateTo("resource/edit/" + id);
    }

    async Task Borrar(int id)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Desea elimiar la Tarea");
        if (confirmed)
        {
            await ResourceService.Delete(id);

            resources = await ResourceService.GetResources();
        }
    }




}
